apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'dev.flutter.flutter-gradle-plugin' // Flutter Plugin

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.iamapo.mapmyshot"
    compileSdk 34
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    // Nutze JVM Toolchain
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "17"
        }
    }

    defaultConfig {
        applicationId = "com.iamapo.mapmyshot"
        minSdkVersion 30
        targetSdkVersion 34
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }


    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "androidx.exifinterface:exifinterface:1.3.7"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.21"
    implementation("com.google.android.gms:play-services-ads:23.5.0") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
}
